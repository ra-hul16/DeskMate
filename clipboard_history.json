[
    "pip3 install opencv-python",
    " installe",
    "import tkinter as tk\r\nimport math\r\nimport cv2\r\nimport pytesseract\r\nimport numpy as np\r\nfrom tkinter import filedialog, messagebox\r\nfrom tensorflow.keras.applications import MobileNetV2\r\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions\r\nimport pyperclip\r\nimport time\r\nimport json\r\nimport os\r\nfrom pyzbar.pyzbar import decode\r\nimport threading\r\n\r\n# Create main application window\r\nroot = tk.Tk()\r\nroot.title(\"Desktop Assistant\")\r\nroot.geometry(f\"{root.winfo_screenwidth()}x{root.winfo_screenheight()}\")  # Full-screen transparent window\r\nroot.overrideredirect(True)  # Removes window borders\r\nroot.wm_attributes(\"-transparentcolor\", \"#f0f0f0\")  # Set transparency color\r\nroot.wm_attributes(\"-topmost\", True)  # Keep the window on top\r\nroot.config(bg=\"#f0f0f0\")  # Transparent background\r\n\r\n# Constants for circle layout\r\nRADIUS = 150\r\nFEATURES = [\r\n    {\"name\": \"Copy-Paste\", \"symbol\": \"\ud83d\udccb\", \"function\": lambda: clipboard_tracker()},\r\n    {\"name\": \"Text Extraction\", \"symbol\": \"\ud83d\udd0d\", \"function\": lambda: google_lens_clone()},\r\n    {\"name\": \"QR Scanner\", \"symbol\": \"\ud83d\udd75\ufe0f\", \"function\": lambda: scan_qr_from_image()},\r\n    {\"name\": \"To-Do List\", \"symbol\": \"\ud83c\udfaf\", \"function\": lambda: to_do_list()},\r\n    {\"name\": \"Task Reminder\", \"symbol\": \"\ud83d\udd51\", \"function\": lambda: task_reminder()}\r\n]\r\n\r\n# Store feature icons\r\nicons = []\r\n\r\n# Track the current running thread and stop flag\r\ncurrent_thread = None\r\ncurrent_feature = None\r\nstop_flags = {}\r\n\r\n# Function to stop current feature gracefully\r\ndef stop_current_feature():\r\n    global current_thread, current_feature\r\n    if current_feature:\r\n        stop_flags[current_feature['name']] = True  # Set stop flag for current feature\r\n        print(f\"Stopping {current_feature['name']} feature.\")\r\n        current_feature = None\r\n        current_thread = None\r\n\r\n# Define functionality for each feature with graceful termination using stop flags\r\nimport tkinter as tk\r\nfrom tkinter import filedialog, messagebox\r\nimport cv2\r\nfrom tensorflow.keras.applications import MobileNetV2\r\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions\r\nimport numpy as np\r\nimport pytesseract\r\n\r\nimport tkinter as tk\r\nfrom tkinter import filedialog, messagebox\r\nimport cv2\r\nimport numpy as np\r\nfrom tensorflow.keras.applications import MobileNetV2\r\nfrom tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions\r\nimport pytesseract\r\n\r\n\r\ndef google_lens_clone():\r\n    def process_image():\r\n        # Stop any running feature (if applicable, placeholder here)\r\n        stop_flags = {'Text Extraction': False}  # Reset stop flag\r\n\r\n        # Open file dialog to select an image file\r\n        file_path = filedialog.askopenfilename(\r\n            title=\"Select an Image File\",\r\n            filetypes=[(\"Image Files\", \"*.jpg *.jpeg *.png *.bmp *.tiff\")]\r\n        )\r\n        if not file_path:\r\n            return\r\n\r\n        try:\r\n            image = cv2.imread(file_path)\r\n            if image is None:\r\n                raise ValueError(\"Could not read the image. Ensure the file is valid.\")\r\n\r\n            # Object Detection using MobileNetV2\r\n            model = MobileNetV2(weights=\"imagenet\")\r\n            resized_image = cv2.resize(image, (224, 224))  # Resize to match model input size\r\n            img_array = preprocess_input(np.expand_dims(resized_image, axis=0))\r\n            predictions = model.predict(img_array)\r\n            labels = decode_predictions(predictions, top=3)\r\n\r\n            # Display object detection results in a text widget\r\n            results_text = \"\ud83d\uddbc\ufe0f **Objects Detected**:\\n\\n\"\r\n            for label in labels[0]:\r\n                results_text += f\"- **{label[1]}** with confidence **{label[2]:.2f}**\\n\"\r\n\r\n            # Text extraction using Tesseract OCR\r\n            gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\r\n            text = pytesseract.image_to_string(gray_image)\r\n            results_text += \"\\n\u270d\ufe0f **Extracted Text**:\\n\\n\" + (text if text.strip() else \"No text detected.\")\r\n\r\n            # Show results in the GUI\r\n            results_box.delete(1.0, tk.END)\r\n            results_box.insert(tk.END, results_text)\r\n\r\n        except Exception as e:\r\n            messagebox.showerror(\"Error\", f\"An error occurred: {e}\")\r\n\r\n    # Create the GUI application\r\n    root = tk.Tk()\r\n    root.title(\"Google Lens Clone\")\r\n    root.geometry(\"700x500\")\r\n    root.configure(bg=\"#f4f6f9\")\r\n\r\n    # Title label\r\n    title_label = tk.Label(\r\n        root,\r\n        text=\"Google Lens Clone\",\r\n        font=(\"Helvetica\", 18, \"bold\"),\r\n        fg=\"white\",\r\n        bg=\"#2c3e50\",\r\n        padx=10,\r\n        pady=10\r\n    )\r\n    title_label.pack(fill=\"x\")\r\n\r\n    # Instruction label\r\n    instruction_label = tk.Label(\r\n        root,\r\n        text=\"Upload an image to detect objects and extract text.\",\r\n        font=(\"Helvetica\", 12),\r\n        fg=\"#34495e\",\r\n        bg=\"#f4f6f9\",\r\n        pady=5\r\n    )\r\n    instruction_label.pack()\r\n\r\n    # Add a button to trigger the function\r\n    select_button = tk.Button(\r\n        root,\r\n        text=\"Select Image and Process\",\r\n        font=(\"Helvetica\", 12, \"bold\"),\r\n        bg=\"#3498db\",\r\n        fg=\"white\",\r\n        activebackground=\"#2980b9\",\r\n        activeforeground=\"white\",\r\n        padx=10,\r\n        pady=5,\r\n        relief=\"raised\",\r\n        command=process_image\r\n    )\r\n    select_button.pack(pady=10)\r\n\r\n    # Add a text widget to display results\r\n    results_box = tk.Text(\r\n        root,\r\n        wrap=tk.WORD,\r\n        width=80,\r\n        height=20,\r\n        font=(\"Courier\", 10),\r\n        bg=\"#ecf0f1\",\r\n        fg=\"#2c3e50\",\r\n        relief=\"sunken\",\r\n        borderwidth=2\r\n    )\r\n    results_box.pack(pady=10)\r\n\r\n    # Run the GUI application\r\n    root.mainloop()\r\n\r\n\r\nimport tkinter as tk\r\nfrom tkinter import messagebox\r\nimport os\r\nimport json\r\nimport pyperclip\r\nimport time\r\nimport threading\r\n\r\nimport tkinter as tk\r\nfrom tkinter import messagebox, ttk\r\nimport os\r\nimport json\r\nimport pyperclip\r\nimport time\r\nimport threading\r\n\r\n\r\ndef clipboard_tracker():\r\n    stop_flags = {'Copy-Paste': False}  # Reset stop flag\r\n    HISTORY_FILE = \"clipboard_history.json\"\r\n    MAX_ITEMS = 100  # Maximum items to store in the history\r\n\r\n    def load_history():\r\n        if os.path.exists(HISTORY_FILE):\r\n            with open(HISTORY_FILE, \"r\") as file:\r\n                return json.load(file)\r\n        return []\r\n\r\n    def save_history(history):\r\n        with open(HISTORY_FILE, \"w\") as file:\r\n            json.dump(history, file, indent=4)\r\n\r\n    def start_tracking():\r\n        stop_flags['Copy-Paste'] = False\r\n        clipboard_history = load_history()\r\n        previous_clip = None\r\n\r\n        def track_clipboard():\r\n            nonlocal previous_clip\r\n            try:\r\n                while not stop_flags['Copy-Paste']:\r\n                    current_clip = pyperclip.paste()\r\n\r\n                    if current_clip != previous_clip and current_clip.strip():\r\n                        previous_clip = current_clip\r\n                        if current_clip not in clipboard_history:\r\n                            clipboard_history.append(current_clip)\r\n\r\n                            # If the history exceeds the max limit, remove the oldest item\r\n                            if len(clipboard_history) > MAX_ITEMS:\r\n                                clipboard_history.pop(0)\r\n\r\n                            save_history(clipboard_history)\r\n\r\n                            # Display the new item as a separate styled label\r\n                            item_label = tk.Label(\r\n                                scrollable_frame,\r\n                                text=current_clip,\r\n                                wraplength=500,\r\n                                justify=\"left\",\r\n                                anchor=\"w\",\r\n                                bg=\"#fef5e7\",\r\n                                fg=\"#2c3e50\",\r\n                                font=(\"Arial\", 10, \"italic\"),\r\n                                padx=10,\r\n                                pady=5,\r\n                                relief=\"groove\",\r\n                                borderwidth=2,\r\n                            )\r\n                            item_label.pack(fill=\"x\", pady=2, padx=5)\r\n\r\n                            # Automatically scroll to the bottom\r\n                            canvas.yview_moveto(1.0)\r\n\r\n                    time.sleep(1)\r\n\r\n            except Exception as e:\r\n                messagebox.showerror(\"Error\", f\"Error in clipboard tracking: {e}\")\r\n\r\n        # Run the tracking in a separate thread\r\n        tracking_thread = threading.Thread(target=track_clipboard, daemon=True)\r\n        tracking_thread.start()\r\n\r\n    def stop_tracking():\r\n        stop_flags['Copy-Paste'] = True\r\n        messagebox.showinfo(\"Stopped\", \"Clipboard tracking stopped.\")\r\n\r\n    def load_existing_history():\r\n        history = load_history()\r\n\r\n        # Clear existing items in the scrollable frame\r\n        for widget in scrollable_frame.winfo_children():\r\n            widget.destroy()\r\n\r\n        # Display each clipboard item separately\r\n        for item in history:\r\n            item_label = tk.Label(\r\n                scrollable_frame,\r\n                text=item,\r\n                wraplength=500,\r\n                justify=\"left\",\r\n                anchor=\"w\",\r\n                bg=\"#fef5e7\",\r\n                fg=\"#2c3e50\",\r\n                font=(\"Arial\", 10, \"italic\"),\r\n                padx=10,\r\n                pady=5,\r\n                relief=\"groove\",\r\n                borderwidth=2,\r\n            )\r\n            item_label.pack(fill=\"x\", pady=2, padx=5)\r\n\r\n    # Create the GUI\r\n    root = tk.Tk()\r\n    root.title(\"Clipboard Tracker\")\r\n    root.geometry(\"600x500\")\r\n    root.configure(bg=\"#ecf0f1\")\r\n\r\n    # Title label\r\n    title_label = tk.Label(\r\n        root,\r\n        text=\"Clipboard Tracker\",\r\n        font=(\"Helvetica\", 18, \"bold\"),\r\n        bg=\"#ecf0f1\",\r\n        fg=\"#2980b9\",\r\n        pady=10,\r\n    )\r\n    title_label.pack()\r\n\r\n    # Add buttons with styled appearance\r\n    button_frame = tk.Frame(root, bg=\"#ecf0f1\")\r\n    button_frame.pack(pady=10)\r\n\r\n    start_button = tk.Button(\r\n        button_frame,\r\n        text=\"Start Tracking\",\r\n        command=start_tracking,\r\n        bg=\"#2ecc71\",\r\n        fg=\"white\",\r\n        font=(\"Arial\", 12, \"bold\"),\r\n        activebackground=\"#27ae60\",\r\n        activeforeground=\"white\",\r\n        relief=\"raised\",\r\n        borderwidth=2,\r\n        padx=10,\r\n    )\r\n    start_button.grid(row=0, column=0, padx=10)\r\n\r\n    stop_button = tk.Button(\r\n        button_frame,\r\n        text=\"Stop Tracking\",\r\n        command=stop_tracking,\r\n        bg=\"#e74c3c\",\r\n        fg=\"white\",\r\n        font=(\"Arial\", 12, \"bold\"),\r\n        activebackground=\"#c0392b\",\r\n        activeforeground=\"white\",\r\n        relief=\"raised\",\r\n        borderwidth=2,\r\n        padx=10,\r\n    )\r\n    stop_button.grid(row=0, column=1, padx=10)\r\n\r\n    load_button = tk.Button(\r\n        button_frame,\r\n        text=\"Load History\",\r\n        command=load_existing_history,\r\n        bg=\"#3498db\",\r\n        fg=\"white\",\r\n        font=(\"Arial\", 12, \"bold\"),\r\n        activebackground=\"#2980b9\",\r\n        activeforeground=\"white\",\r\n        relief=\"raised\",\r\n        borderwidth=2,\r\n        padx=10,\r\n    )\r\n    load_button.grid(row=0, column=2, padx=10)\r\n\r\n    # Scrollable frame for displaying clipboard history\r\n    scrollable_frame_container = tk.Frame(root, bg=\"#ecf0f1\")\r\n    scrollable_frame_container.pack(fill=\"both\", expand=True, pady=10, padx=10)\r\n\r\n    # Create a canvas for the scrollable frame\r\n    canvas = tk.Canvas(scrollable_frame_container, bg=\"#ecf0f1\", highlightthickness=0)\r\n    scrollbar = ttk.Scrollbar(scrollable_frame_container, orient=\"vertical\", command=canvas.yview)\r\n    scrollable_frame = tk.Frame(canvas, bg=\"#ecf0f1\")\r\n\r\n    # Configure scrolling\r\n    scrollable_frame.bind(\r\n        \"<Configure>\",\r\n        lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\"))\r\n    )\r\n    canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\")\r\n    canvas.configure(yscrollcommand=scrollbar.set)\r\n\r\n    # Pack canvas and scrollbar\r\n    canvas.pack(side=\"left\", fill=\"both\", expand=True)\r\n    scrollbar.pack(side=\"right\", fill=\"y\")\r\n\r\n    # Start the GUI main loop\r\n    root.mainloop()\r\n\r\n\r\n\r\nimport tkinter as tk\r\nfrom tkinter import messagebox\r\n\r\nimport tkinter as tk\r\nfrom tkinter import messagebox\r\n\r\ndef to_do_list():\r\n    def manage_to_do_list():\r\n        # Create a new window for the To-Do List\r\n        to_do_window = tk.Toplevel()\r\n        to_do_window.title(\"To-Do List\")\r\n        to_do_window.geometry(\"400x500\")\r\n        to_do_window.resizable(False, False)\r\n\r\n        # Listbox to display tasks\r\n        task_listbox = tk.Listbox(to_do_window, font=(\"Arial\", 14), width=30, height=15, selectmode=tk.SINGLE)\r\n        task_listbox.pack(pady=20)\r\n\r\n        # Entry widget for adding tasks\r\n        task_entry = tk.Entry(to_do_window, font=(\"Arial\", 14), width=25)\r\n        task_entry.pack(pady=10)\r\n\r\n        # Function to add a task\r\n        def add_task():\r\n            task = task_entry.get()\r\n            if task.strip():  # Ensure the task is not empty\r\n                task_listbox.insert(tk.END, task)\r\n                task_entry.delete(0, tk.END)  # Clear the entry after adding\r\n            else:\r\n                messagebox.showwarning(\"Invalid Input\", \"Task cannot be empty!\")\r\n\r\n        # Function to remove a selected task\r\n        def remove_task():\r\n            try:\r\n                selected_task_index = task_listbox.curselection()[0]\r\n                task_listbox.delete(selected_task_index)\r\n            except IndexError:\r\n                messagebox.showwarning(\"No Selection\", \"Please select a task to remove!\")\r\n\r\n        # Function to clear all tasks\r\n        def clear_tasks():\r\n            if messagebox.askyesno(\"Confirmation\", \"Are you sure you want to clear all tasks?\"):\r\n                task_listbox.delete(0, tk.END)\r\n\r\n        # Buttons for managing tasks\r\n        button_frame = tk.Frame(to_do_window)\r\n        button_frame.pack(pady=20)\r\n\r\n        add_button = tk.Button(button_frame, text=\"Add Task\", font=(\"Arial\", 12), command=add_task, width=10)\r\n        add_button.grid(row=0, column=0, padx=5)\r\n\r\n        remove_button = tk.Button(button_frame, text=\"Remove Task\", font=(\"Arial\", 12), command=remove_task, width=10)\r\n        remove_button.grid(row=0, column=1, padx=5)\r\n\r\n        clear_button = tk.Button(button_frame, text=\"Clear All\", font=(\"Arial\", 12), command=clear_tasks, width=10)\r\n        clear_button.grid(row=0, column=2, padx=5)\r\n\r\n        # Close button\r\n        close_button = tk.Button(to_do_window, text=\"Close\", font=(\"Arial\", 12), command=to_do_window.destroy, width=10)\r\n        close_button.pack(pady=10)\r\n\r\n    # Initialize root window\r\n    root = tk.Tk()\r\n    root.title(\"To-Do List Example\")\r\n    root.geometry(\"200x100\")\r\n\r\n    open_button = tk.Button(root, text=\"Open To-Do List\", command=manage_to_do_list, width=20)\r\n    open_button.pack(pady=20)\r\n\r\n    root.mainloop()\r\nimport tkinter as tk\r\nfrom tkinter import filedialog, messagebox\r\nimport cv2\r\nfrom pyzbar.pyzbar import decode\r\n\r\ndef scan_qr_from_image():\r\n    def select_image():\r\n        # Open file dialog to select an image file\r\n        file_path = filedialog.askopenfilename(\r\n            title=\"Select an Image File\",\r\n            filetypes=[(\"Image Files\", \"*.png;*.jpg;*.jpeg;*.bmp;*.tiff\")]\r\n        )\r\n        \r\n        if not file_path:\r\n            return\r\n        \r\n        try:\r\n            # Read the image using OpenCV\r\n            img = cv2.imread(file_path)\r\n            decoded_objects = decode(img)\r\n\r\n            if decoded_objects:\r\n                results_text = \"Data in QR Code:\\n\"\r\n                for obj in decoded_objects:\r\n                    results_text += f\"{obj.data.decode('utf-8')}\\n\"\r\n            else:\r\n                results_text = \"No QR code found in the image.\"\r\n            \r\n            # Display results in the results box\r\n            results_box.delete(1.0, tk.END)\r\n            results_box.insert(tk.END, results_text)\r\n\r\n        except Exception as e:\r\n            messagebox.showerror(\"Error\", f\"Error reading image: {e}\")\r\n\r\n    # Create the GUI application\r\n    root = tk.Tk()\r\n    root.title(\"QR Code Scanner from Image\")\r\n    root.geometry(\"500x400\")\r\n    root.configure(bg=\"#f5f5f5\")\r\n\r\n    # Title label\r\n    title_label = tk.Label(\r\n        root,\r\n        text=\"QR Code Scanner\",\r\n        font=(\"Helvetica\", 18, \"bold\"),\r\n        fg=\"#2c3e50\",\r\n        bg=\"#f5f5f5\",\r\n        pady=10\r\n    )\r\n    title_label.pack()\r\n\r\n    # Button to select image\r\n    select_button = tk.Button(\r\n        root,\r\n        text=\"Select Image to Scan\",\r\n        font=(\"Helvetica\", 12, \"bold\"),\r\n        bg=\"#3498db\",\r\n        fg=\"white\",\r\n        activebackground=\"#2980b9\",\r\n        activeforeground=\"white\",\r\n        command=select_image,\r\n        padx=10,\r\n        pady=5\r\n    )\r\n    select_button.pack(pady=10)\r\n\r\n    # Text box to show QR code result\r\n    results_box = tk.Text(root, wrap=tk.WORD, width=60, height=10, font=(\"Arial\", 12))\r\n    results_box.pack(pady=20)\r\n\r\n    # Run the GUI application\r\n    root.mainloop()\r\n\r\n\r\n\r\n# Function to display feature icons\r\ndef toggle_features():\r\n    global icons, current_thread, current_feature\r\n\r\n    # If icons are visible, hide them\r\n    if icons:\r\n        for icon in icons:\r\n            icon.destroy()\r\n        icons = []  # Clear the icons list\r\n    \r\n    else:\r\n        # If icons are hidden, show them\r\n        center_x = canvas.winfo_x() + 50\r\n        center_y = canvas.winfo_y() + 50\r\n\r\n        for i, feature in enumerate(FEATURES):\r\n            angle = math.radians((360 / len(FEATURES)) * i)\r\n            x = center_x + RADIUS * math.cos(angle)\r\n            y = center_y + RADIUS * math.sin(angle)\r\n\r\n            frame = tk.Frame(root, bg=\"white\", highlightbackground=\"black\", highlightthickness=1)\r\n            frame.place(x=x-50, y=y-50, width=100, height=70)\r\n\r\n            def on_enter(event, f=frame):\r\n                f.config(bg=\"#000000\")\r\n\r\n            def on_leave(event, f=frame):\r\n                f.config(bg=\"white\")\r\n\r\n            frame.bind(\"<Enter>\", on_enter)\r\n            frame.bind(\"<Leave>\", on_leave)\r\n\r\n            def on_click(event, func=feature[\"function\"], f=frame, name=feature[\"name\"]):\r\n                global current_thread, current_feature\r\n                # If the feature is already running, do nothing\r\n                if current_feature and current_feature[\"name\"] == name:\r\n                    return\r\n\r\n                # Stop the current feature and start the new one\r\n                stop_current_feature()\r\n                current_feature = feature\r\n                current_thread = threading.Thread(target=func)\r\n                current_thread.start()\r\n\r\n            frame.bind(\"<Button-1>\", on_click)\r\n\r\n            lbl_symbol = tk.Label(frame, text=feature[\"symbol\"], font=(\"Arial\", 18), bg=\"white\")\r\n            lbl_symbol.pack(pady=(5, 0))\r\n\r\n            lbl_name = tk.Label(frame, text=feature[\"name\"], font=(\"Arial\", 10), bg=\"white\")\r\n            lbl_name.pack()\r\n\r\n            icons.append(frame)  # Add the frame to the icons list\r\n\r\n# Add an Off button to stop the application\r\n\r\n\r\nimport tkinter as tk\r\nfrom tkinter import messagebox\r\nfrom datetime import datetime\r\nimport time\r\nimport threading\r\n\r\ndef task_reminder():\r\n    def set_reminder():\r\n        task = task_entry.get()\r\n        task_time = time_entry.get()\r\n\r\n        if not task.strip() or not task_time.strip():\r\n            messagebox.showwarning(\"Invalid Input\", \"Both Task and Time are required.\")\r\n            return\r\n\r\n        try:\r\n            task_time_obj = datetime.strptime(task_time, \"%H:%M\")\r\n            current_time = datetime.now().strftime(\"%H:%M\")\r\n\r\n            # Add the task to the listbox\r\n            tasks_listbox.insert(tk.END, f\"{task} at {task_time}\")\r\n\r\n            # Convert the task time into a datetime object for comparison\r\n            task_time_obj = task_time_obj.replace(year=datetime.now().year, month=datetime.now().month, day=datetime.now().day)\r\n\r\n            def remind():\r\n                while True:\r\n                    current_time_obj = datetime.now()\r\n                    if current_time_obj >= task_time_obj:\r\n                        messagebox.showinfo(\"Task Reminder\", f\"Time to do: {task}\")\r\n                        break\r\n                    time.sleep(30)  # Check every 30 seconds\r\n\r\n            reminder_thread = threading.Thread(target=remind)\r\n            reminder_thread.daemon = True  # Run in the background\r\n            reminder_thread.start()\r\n\r\n            task_entry.delete(0, tk.END)\r\n            time_entry.delete(0, tk.END)\r\n\r\n        except ValueError:\r\n            messagebox.showwarning(\"Invalid Time Format\", \"Please enter the time in HH:MM format.\")\r\n\r\n    # Create the GUI application\r\n    root = tk.Tk()\r\n    root.title(\"Task Reminder\")\r\n    root.geometry(\"400x400\")\r\n    root.configure(bg=\"#f7f7f7\")\r\n\r\n    # Title label\r\n    title_label = tk.Label(\r\n        root,\r\n        text=\"Task Reminder\",\r\n        font=(\"Helvetica\", 18, \"bold\"),\r\n        fg=\"#2c3e50\",\r\n        bg=\"#f7f7f7\",\r\n        pady=10\r\n    )\r\n    title_label.pack()\r\n\r\n    # Task input\r\n    task_label = tk.Label(root, text=\"Task:\", font=(\"Helvetica\", 12), fg=\"#34495e\", bg=\"#f7f7f7\")\r\n    task_label.pack(pady=5)\r\n    task_entry = tk.Entry(root, font=(\"Helvetica\", 14), width=25)\r\n    task_entry.pack(pady=5)\r\n\r\n    # Time input (HH:MM)\r\n    time_label = tk.Label(root, text=\"Time (HH:MM):\", font=(\"Helvetica\", 12), fg=\"#34495e\", bg=\"#f7f7f7\")\r\n    time_label.pack(pady=5)\r\n    time_entry = tk.Entry(root, font=(\"Helvetica\", 14), width=25)\r\n    time_entry.pack(pady=5)\r\n\r\n    # Set reminder button\r\n    set_button = tk.Button(\r\n        root,\r\n        text=\"Set Reminder\",\r\n        font=(\"Helvetica\", 12, \"bold\"),\r\n        bg=\"#3498db\",\r\n        fg=\"white\",\r\n        activebackground=\"#2980b9\",\r\n        activeforeground=\"white\",\r\n        padx=10,\r\n        pady=5,\r\n        relief=\"raised\",\r\n        command=set_reminder\r\n    )\r\n    set_button.pack(pady=10)\r\n\r\n    # Listbox to display tasks\r\n    tasks_listbox = tk.Listbox(root, font=(\"Arial\", 12), width=40, height=10)\r\n    tasks_listbox.pack(pady=20)\r\n\r\n    # Run the GUI application\r\n    root.mainloop()\r\n\r\n\r\ndef turn_off_assistant():\r\n    global current_thread, current_feature\r\n    # Stop any running features\r\n    if current_feature:\r\n        stop_flags[current_feature['name']] = True\r\n        print(f\"Stopping {current_feature['name']} feature.\")\r\n    if current_thread and current_thread.is_alive():\r\n        current_thread.join()  # Wait for the thread to finish\r\n    \r\n    # Exit the application\r\n    root.destroy()\r\n    print(\"Desktop Assistant turned off.\")\r\n\r\n# Create the Off button\r\noff_button = tk.Button(\r\n    root,\r\n    text=\"Off\",\r\n    font=(\"Arial\", 12),\r\n    bg=\"red\",\r\n    fg=\"white\",\r\n    command=turn_off_assistant,\r\n    width=10\r\n)\r\noff_button.place(x=10, y=10)  # Adjust position as needed\r\n\r\n# Function to drag the main circle icon\r\ndef on_drag_start(event):\r\n    event.widget.startX = event.x\r\n    event.widget.startY = event.y\r\n\r\ndef on_drag_motion(event):\r\n    x = root.winfo_pointerx() - event.widget.startX\r\n    y = root.winfo_pointery() - event.widget.startY\r\n    canvas.place(x=x, y=y)\r\n\r\n# Create canvas for the main circle button\r\ncanvas = tk.Canvas(root, width=100, height=100, bg=\"#f0f0f0\", highlightthickness=0)\r\ncanvas.place(x=300, y=300)\r\n\r\n# Draw the circular button on the canvas\r\ncircle = canvas.create_oval(0, 0, 100, 100, fill=\"black\", outline=\"\")\r\n\r\n# Bind click and drag events to the canvas\r\ncanvas.bind(\"<Button-1>\", lambda event: toggle_features())\r\ncanvas.bind(\"<ButtonPress-3>\", on_drag_start)  # Right mouse button to start dragging\r\ncanvas.bind(\"<B3-Motion>\", on_drag_motion)  # Drag with right mouse button\r\n\r\n# Run the application\r\nroot.mainloop()",
    " tensorflow/core/util/port.cc:153"
]